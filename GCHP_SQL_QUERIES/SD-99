Based on our previous call with Jeff, the below given information is how we were told to calculate a clean claim.
 
Definition of Clean Claim - All information is entered into the system. Clean Claim Date is on the Line Item
 
Auto Adjudication - First pass, Final and Denied, No User Intervention.
 
The dashboard has been updated with this logic as well and Hari had asked to share this information to all so that we can cross check the condition by which we identify a clean claim in our OPS report. 
The definition which i have given on the claims dashboard documentation is as below:
 
A Clean Claim is a claim that is either in Final or Denied status and has been adjudicated correctly on the first pass. The Total Clean Claim Count shows the total number of clean claims in the inventory based on the selected criteria, such as date range or claim status. This metric helps measure how many claims were processed accurately and efficiently without requiring manual intervention.

DAX Formula used to flag a claim as clean claim: 
clean_claim_flag =
IF(
   UPDATED_CLAIMS[IS_FIRST_PASS_AUTO_ADJUDICATED] = "Y" 
   && (UPDATED_CLAIMS[CLAIM_STATUS] = "Final" || UPDATED_CLAIMS[CLAIM_STATUS] = "Denied"), 
   "YES", 
   "NO"
)
This formula creates a flag where it marks a claim as a clean claim by checking if the claim is in Final or Denied state and is also auto adjudicated in the first pass. 



--Updated Clean Claim Date Query
WITH RankedClaims AS (
    SELECT
        cf.*,
        ROW_NUMBER() OVER (PARTITION BY cf.CLAIM_HCC_ID ORDER BY cf.MOST_RECENT_PROCESS_TIME DESC) AS rn
    FROM
        CLAIM_FACT cf
    WHERE
        cf.IS_CONVERTED = 'N'
        AND cf.IS_TRIAL_CLAIM = 'N'
        AND cf.IS_CURRENT = 'Y'
        AND cf.ENTRY_TIME >= TO_TIMESTAMP('2024-07-02 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
),
AggregatedClaimLines AS (
    SELECT  
        aclf.CLAIM_FACT_KEY,
        cleanclaimdd.DATE_VALUE AS CLEAN_CLAIM_DATE,
        SUM(aclf.BILLED_AMOUNT) AS TOTAL_BILLED_AMOUNT,
        SUM(aclf.PAID_AMOUNT) AS TOTAL_PAID_AMOUNT
    FROM
        payor_dw.ALL_CLAIM_LINE_FACT aclf
  	LEFT JOIN
   	 payor_dw.DATE_DIMENSION cleanclaimdd ON aclf.CLEAN_CLAIM_LINE_DATE_KEY = cleanclaimdd.DATE_KEY
    GROUP BY
        aclf.CLAIM_FACT_KEY, cleanclaimdd.DATE_VALUE
)
SELECT DISTINCT
    rc.CLAIM_HCC_ID,
    rc.CLAIM_STATUS,
    rc.CLAIM_TYPE_NAME,
    csc.CLAIM_SOURCE_NAME,
    rc.ENTRY_TIME,
    COALESCE(aclf_agg.CLEAN_CLAIM_DATE, dd.DATE_VALUE) AS CLEAN_CLAIM_DATE,  -- Use COALESCE to fill with receipt DATE
    TRUNC(CURRENT_DATE) - TRUNC(COALESCE(aclf_agg.CLEAN_CLAIM_DATE, dd.DATE_VALUE)) AS day_difference_clean_claim, -- New column for days difference with clean claim date
    dd.DATE_VALUE AS RECEIPT_DATE,
    TRUNC(CURRENT_DATE) -  TRUNC(dd.DATE_VALUE) AS day_difference_receipt,
    rc.MOST_RECENT_PROCESS_TIME
    --COUNT(CASE WHEN aclf_agg.CLEAN_CLAIM_DATE IS NOT NULL THEN 1 END) AS Claims_With_Clean_Claim_Date,
    --COUNT(CASE WHEN aclf_agg.CLEAN_CLAIM_DATE IS NULL THEN 1 END) AS Claims_Without_Clean_Claim_Date
FROM RankedClaims rc
LEFT JOIN
    AggregatedClaimLines aclf_agg ON rc.CLAIM_FACT_KEY = aclf_agg.CLAIM_FACT_KEY
LEFT JOIN
    payor_dw.CLAIM_SOURCE_CODE csc ON rc.CLAIM_SOURCE_KEY = csc.CLAIM_SOURCE_KEY
LEFT JOIN
    payor_dw.PAYMENT_FACT_TO_CLAIM_FACT pftcf ON rc.CLAIM_FACT_KEY = pftcf.CLAIM_FACT_KEY
LEFT JOIN
    payor_dw.PAYMENT_FACT pf ON pftcf.PAYMENT_FACT_KEY = pf.PAYMENT_FACT_KEY
LEFT JOIN
    payor_dw.DATE_DIMENSION dd ON rc.RECEIPT_DATE_KEY = dd.DATE_KEY
LEFT JOIN
    payor_dw.DATE_DIMENSION suppaydate ON pf.PAYMENT_DATE_KEY = suppaydate.DATE_KEY
WHERE
    rn = 1;

##########################################################################################################################################################################

--count weather it is clean claim or not
   WITH RankedClaims AS (
    SELECT
        cf.*,
        ROW_NUMBER() OVER (PARTITION BY cf.CLAIM_HCC_ID ORDER BY cf.MOST_RECENT_PROCESS_TIME DESC) AS rn
    FROM
        CLAIM_FACT cf
    WHERE
        cf.IS_CONVERTED = 'N'
        AND cf.IS_TRIAL_CLAIM = 'N'
        AND cf.ENTRY_TIME >= TO_TIMESTAMP('2024-07-02 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
),
AggregatedClaimLines AS (
    SELECT
        aclf.CLAIM_FACT_KEY,
        cleanclaimdd.DATE_VALUE AS CLEAN_CLAIM_DATE,
        SUM(aclf.BILLED_AMOUNT) AS TOTAL_BILLED_AMOUNT,
        SUM(aclf.PAID_AMOUNT) AS TOTAL_PAID_AMOUNT
    FROM
        payor_dw.ALL_CLAIM_LINE_FACT aclf
  	LEFT JOIN
   	 payor_dw.DATE_DIMENSION cleanclaimdd ON aclf.CLEAN_CLAIM_LINE_DATE_KEY = cleanclaimdd.DATE_KEY
    GROUP BY
        aclf.CLAIM_FACT_KEY, cleanclaimdd.DATE_VALUE
)
SELECT
    COUNT(CASE WHEN aclf_agg.CLEAN_CLAIM_DATE IS NOT NULL THEN 1 END) AS Claims_With_Clean_Claim_Date,
    COUNT(CASE WHEN aclf_agg.CLEAN_CLAIM_DATE IS NULL THEN 1 END) AS Claims_Without_Clean_Claim_Date
FROM RankedClaims rc
LEFT JOIN
    AggregatedClaimLines aclf_agg ON rc.CLAIM_FACT_KEY = aclf_agg.CLAIM_FACT_KEY
LEFT JOIN
    payor_dw.CLAIM_SOURCE_CODE csc ON rc.CLAIM_SOURCE_KEY = csc.CLAIM_SOURCE_KEY
LEFT JOIN
    payor_dw.PAYMENT_FACT_TO_CLAIM_FACT pftcf ON rc.CLAIM_FACT_KEY = pftcf.CLAIM_FACT_KEY
LEFT JOIN
    payor_dw.PAYMENT_FACT pf ON pftcf.PAYMENT_FACT_KEY = pf.PAYMENT_FACT_KEY
LEFT JOIN
    payor_dw.DATE_DIMENSION dd ON rc.RECEIPT_DATE_KEY = dd.DATE_KEY
LEFT JOIN
    payor_dw.DATE_DIMENSION suppaydate ON pf.PAYMENT_DATE_KEY = suppaydate.DATE_KEY
WHERE
    rn = 1
    AND dd.DATE_VALUE >= TO_TIMESTAMP('2024-09-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
    AND dd.DATE_VALUE <= TO_TIMESTAMP('2024-09-13 00:00:00', 'YYYY-MM-DD HH24:MI:SS');
#####################################################################################################################################################################

 WITH RankedClaims AS (
    SELECT
        cf.*,
        ROW_NUMBER() OVER (PARTITION BY cf.CLAIM_HCC_ID ORDER BY cf.MOST_RECENT_PROCESS_TIME DESC) AS rn
    FROM
        CLAIM_FACT cf
    WHERE
        cf.IS_CONVERTED = 'N'
        AND cf.IS_TRIAL_CLAIM = 'N'
        AND cf.ENTRY_TIME >= TO_TIMESTAMP('2024-07-02 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
),
AggregatedClaimLines AS (
    SELECT
        aclf.CLAIM_FACT_KEY,
        cleanclaimdd.DATE_VALUE AS CLEAN_CLAIM_DATE,
        SUM(aclf.BILLED_AMOUNT) AS TOTAL_BILLED_AMOUNT,
        SUM(aclf.PAID_AMOUNT) AS TOTAL_PAID_AMOUNT
    FROM
        payor_dw.ALL_CLAIM_LINE_FACT aclf
  	LEFT JOIN
   	 payor_dw.DATE_DIMENSION cleanclaimdd ON aclf.CLEAN_CLAIM_LINE_DATE_KEY = cleanclaimdd.DATE_KEY
    GROUP BY
        aclf.CLAIM_FACT_KEY,cleanclaimdd.DATE_VALUE
)
SELECT
    rc.CLAIM_HCC_ID,
    rc.CLAIM_STATUS,
    rc.CLAIM_TYPE_NAME,
    csc.CLAIM_SOURCE_NAME,
    dd.DATE_VALUE AS Receipt_Date,
    ACLF_AGG.CLEAN_CLAIM_DATE,
    rc.CLAIM_LEVEL_SUBMITTED_CHARGES AS BILLED_AMOUNT,
    aclf_agg.TOTAL_PAID_AMOUNT,
    suppaydate.DATE_VALUE AS Payment_Date
FROM RankedClaims rc
LEFT JOIN
    AggregatedClaimLines aclf_agg ON rc.CLAIM_FACT_KEY = aclf_agg.CLAIM_FACT_KEY
LEFT JOIN
    payor_dw.CLAIM_SOURCE_CODE csc ON rc.CLAIM_SOURCE_KEY = csc.CLAIM_SOURCE_KEY
LEFT JOIN
    payor_dw.PAYMENT_FACT_TO_CLAIM_FACT pftcf ON rc.CLAIM_FACT_KEY = pftcf.CLAIM_FACT_KEY
LEFT JOIN
    payor_dw.PAYMENT_FACT pf ON pftcf.PAYMENT_FACT_KEY = pf.PAYMENT_FACT_KEY
LEFT JOIN
    payor_dw.DATE_DIMENSION dd ON rc.RECEIPT_DATE_KEY = dd.DATE_KEY
LEFT JOIN
    payor_dw.DATE_DIMENSION suppaydate ON pf.PAYMENT_DATE_KEY = suppaydate.DATE_KEY
WHERE
    rn = 1;
   
